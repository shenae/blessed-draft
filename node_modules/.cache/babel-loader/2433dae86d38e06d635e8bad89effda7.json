{"ast":null,"code":"'use strict'; // glorious streaming json parser, built specifically for the twitter streaming api\n// assumptions:\n//   1) ninjas are mammals\n//   2) tweets come in chunks of text, surrounded by {}'s, separated by line breaks\n//   3) only one tweet per chunk\n//\n//   p = new parser.instance()\n//   p.addListener('object', function...)\n//   p.receive(data)\n//   p.receive(data)\n//   ...\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Parser = module.exports = function Parser() {\n  // Make sure we call our parents constructor\n  EventEmitter.call(this);\n  this.buffer = '';\n  return this;\n}; // The parser emits events!\n\n\nParser.prototype = Object.create(EventEmitter.prototype);\nParser.END = '\\r\\n';\nParser.END_LENGTH = 2;\n\nParser.prototype.receive = function receive(buffer) {\n  this.buffer += buffer.toString('utf8');\n  var index, json; // We have END?\n\n  while ((index = this.buffer.indexOf(Parser.END)) > -1) {\n    json = this.buffer.slice(0, index);\n    this.buffer = this.buffer.slice(index + Parser.END_LENGTH);\n\n    if (json.length > 0) {\n      try {\n        json = JSON.parse(json); // Event message\n\n        if (json.event !== undefined) {\n          // First emit specific event\n          this.emit(json.event, json); // Now emit catch-all event\n\n          this.emit('event', json);\n        } // Delete message\n        else if (json.delete !== undefined) {\n            this.emit('delete', json);\n          } // Friends message (beginning of stream)\n          else if (json.friends !== undefined || json.friends_str !== undefined) {\n              this.emit('friends', json);\n            } // Any other message\n            else {\n                this.emit('data', json);\n              }\n      } catch (error) {\n        error.source = json;\n        this.emit('error', error);\n      }\n    } else {\n      // Keep Alive\n      this.emit('ping');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}